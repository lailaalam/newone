....................application property................................

#MySql Data Configuration
spring.datasource.driver = com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/deptfac
  spring.datasource.username=root
spring.datasource.password=

#Thymeleaf Configuration
 spring.thymeleaf.suffix=.html
spring.thymeleaf.cache = false
  #DAO Configuration
spring.jpa.show-sql = true
#Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
......................Department.........................................
package com.cseju.onetomany.modal;

import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;

@Entity
public class Department {
    @Id

    private String deptId;
    private String deptName;
    private String deptCode;

    @ManyToOne(fetch = FetchType.LAZY)
    private Faculty faculty;

    public String getDeptId() {
        return deptId;
    }

    @Override
    public String toString() {
        return "Department{" +
                "deptId='" + deptId + '\'' +
                ", deptName='" + deptName + '\'' + ", deptCode='" + deptCode + '\'' + ", faculty=" + faculty +
                '}';
    }

    public void setDeptId(String deptId) {
        this.deptId = deptId;
    }

    public String getDeptName() {
        return deptName;
    }

    public void setDeptName(String deptName) {
        this.deptName = deptName;
    }

    public String getDeptCode() {
        return deptCode;
    }

    public void setDeptCode(String deptCode) {
        this.deptCode = deptCode;
    }

    public Faculty getFaculty() {
        return faculty;
    }

    public void setFaculty(Faculty faculty) {
        this.faculty = faculty;
    }
}
.....................Faculty..................................
package com.cseju.onetomany.modal;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Set;

@Entity
public class Faculty {
    @Id
    private String facultyId;
    private String facultyName;
    private String facultyCode;

    @OneToMany(fetch = FetchType.LAZY, orphanRemoval = true, mappedBy = "faculty", cascade = CascadeType.ALL)
    private Set<Department> departments = new HashSet<Department>();

    public Set<Department> getDepartments() {
        return departments;
    }

    @Override
    public String toString() {
        return "Faculty{" +
                "facultyId='" + facultyId + '\'' +
                ", facultyName='" + facultyName + '\'' + ", facultyCode='" + facultyCode + '\'' + ", departments=" + departments +
                '}';
    }

    public void setDepartments(Set<Department> departments) {
        this.departments = departments;
    }

    public String getFacultyId() {
        return facultyId;
    }

    public void setFacultyId(String facultyId) {
        this.facultyId = facultyId;
    }

    public String getFacultyName() {
        return facultyName;
    }

    public void setFacultyName(String facultyName) {
        this.facultyName = facultyName;
    }

    public String getFacultyCode() {
        return facultyCode;
    }

    public void setFacultyCode(String facultyCode) {
        this.facultyCode = facultyCode;
    }
}
........................DepartmentController..........................
package com.cseju.onetomany.controller;

import com.cseju.onetomany.modal.Department;
import com.cseju.onetomany.modal.Faculty;
import com.cseju.onetomany.service.DeptService;
import com.cseju.onetomany.service.FacultyService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import java.util.List;

@Controller
@RequestMapping("/department")
public class DepartmentController {

    @Autowired
    private FacultyService facultyService;

    @Autowired
    private DeptService deptService;

    @RequestMapping("/user")
    public ModelAndView userView() {
        int accessTypeFlag = 0; //accessTypeFlag=0 means user access
        ModelAndView modelAndView = new ModelAndView();
        List<Department> list = deptService.getAllDepartment();

        modelAndView.addObject("listOfModel", list);
        modelAndView.addObject("accessTypeFlag", accessTypeFlag);

        modelAndView.setViewName("department");
        return modelAndView;
    }

    @RequestMapping("/admin")
    public ModelAndView adminView() {
        int MODE = 1; // 1 means view mode
// 0 means no data
        Department department = new Department();
        int accessTypeFlag = 1; //accessTypeFlag=1 means admin
        ModelAndView modelAndView = new ModelAndView();

        List<Department> list = deptService.getAllDepartment();
        List<Faculty> fList = facultyService.getAllFaculty();

        if (list.isEmpty()) MODE = 0;

        modelAndView.addObject("listOfModel", list);
        modelAndView.addObject("fList", fList);
        modelAndView.addObject("model", department);
        modelAndView.addObject("MODE", MODE);
        modelAndView.addObject("accessTypeFlag", accessTypeFlag);

        modelAndView.setViewName("department");
        return modelAndView;
    }


    @RequestMapping(value = "/admin/save", method = RequestMethod.POST)
    public ModelAndView save(@ModelAttribute("model") Department department) {
        System.out.println(department.toString());
        Faculty faculty = new Faculty();

        faculty = facultyService.getFacultyById(department.getFaculty().getFacultyId());
        department.setFaculty(faculty);
        deptService.saveOrUpdate(department);

        return adminView();
    }

    @RequestMapping(value = "/admin/remove/{modelId}", method = RequestMethod.GET)
    public ModelAndView save(@RequestParam("modelId") String modelId) {
        deptService.removeDepartment(modelId);

        return new ModelAndView("redirect:/department/admin");
    }

    @RequestMapping(value = "/admin/edit/{modelId}", method = RequestMethod.GET)
    public ModelAndView edit(@RequestParam("modelId") String modelId) {
        int MODE = 2; //MODE=2 means edit/update mode


        Department model = deptService.getDepartmentById(modelId);

        int accessTypeFlag = 1; //accessTypeFlag=1 means admin
        ModelAndView modelAndView = new ModelAndView();
        List<Faculty> fList = facultyService.getAllFaculty();

        modelAndView.addObject("fList", fList);
        modelAndView.addObject("model", model);
        modelAndView.addObject("accessTypeFlag", accessTypeFlag);
        modelAndView.addObject("MODE", MODE);
        modelAndView.setViewName("department");
        return modelAndView;

    }


}


...............................faculty controller................................
package com.cseju.onetomany.controller;

import com.cseju.onetomany.modal.Faculty;
import com.cseju.onetomany.service.FacultyService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import java.util.List;

@Controller
@RequestMapping("/faculty")
public class FacultyController {

    @Autowired
    private FacultyService facultyService;

    @RequestMapping("/user")
    public ModelAndView userView() {
        int accessTypeFlag = 0; //accessTypeFlag=0 means user access
        ModelAndView modelAndView = new ModelAndView();
        List<Faculty> list = facultyService.getAllFaculty();

        modelAndView.addObject("listOfModel", list);
        modelAndView.addObject("accessTypeFlag", accessTypeFlag);

        modelAndView.setViewName("faculty");
        return modelAndView;
    }

    @RequestMapping("/admin")
    public ModelAndView adminView() {
        int MODE = 1; // 1 means view mode
// 0 means no data
        Faculty faculty = new Faculty();
        int accessTypeFlag = 1; //accessTypeFlag=1 means admin
        ModelAndView modelAndView = new ModelAndView();
        List<Faculty> list = facultyService.getAllFaculty();
        if (list.isEmpty()) MODE = 0;
        modelAndView.addObject("listOfModel", list);
        modelAndView.addObject("model", faculty);
        modelAndView.addObject("MODE", MODE);
        modelAndView.addObject("accessTypeFlag", accessTypeFlag);

        modelAndView.setViewName("faculty");
        return modelAndView;
    }


    @RequestMapping(value = "/admin/save", method = RequestMethod.POST)
    public ModelAndView save(@ModelAttribute("model") Faculty faculty) {
        facultyService.saveOrUpdate(faculty);


        return adminView();
    }

    @RequestMapping(value = "/admin/remove/{modelId}", method = RequestMethod.GET)
    public ModelAndView save(@RequestParam("modelId") String modelId) {
        facultyService.removeFaculty(modelId);

        return new ModelAndView("redirect:/faculty/admin");
    }

    @RequestMapping(value = "/admin/edit/{modelId}", method = RequestMethod.GET)
    public ModelAndView edit(@RequestParam("modelId") String modelId) {
        int MODE = 2; //MODE=2 means edit/update mode
        Faculty faculty = facultyService.getFacultyById(modelId);

        int accessTypeFlag = 1; //accessTypeFlag=1 means admin
        ModelAndView modelAndView = new ModelAndView();

        modelAndView.addObject("listOfModel", faculty);
        modelAndView.addObject("model", faculty);
        modelAndView.addObject("accessTypeFlag", accessTypeFlag);
        modelAndView.addObject("MODE", MODE);
        modelAndView.setViewName("faculty");
        return modelAndView;

    }


}
...............................DepartmentRepo.....................................
package com.cseju.onetomany.repo;
import com.cseju.onetomany.modal.Department;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface DepartmentRepo extends JpaRepository<Department,String> { public Department findDepartmentByFacultyFacultyCode(String facultyId);
}
...............................facultyRepo........................................

package com.cseju.onetomany.repo;

import com.cseju.onetomany.modal.Faculty;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface FacultyRepo extends JpaRepository<Faculty,String> {
}
..........................departmentService..................................
package com.cseju.onetomany.service;

import com.cseju.onetomany.modal.Department;

import java.util.List;

public interface DeptService {
    public List<Department> getAllDepartment();
    //public List<Department> getDepartmentByFaculty(String facultyId);
    public Department getDepartmentById(String departmentId);
    public void saveOrUpdate(Department department);
    public void removeDepartment(String departmentId);
}
..........................DepartmentServiceImpl.....................................
package com.cseju.onetomany.service;

import com.cseju.onetomany.modal.Department;
import com.cseju.onetomany.repo.DepartmentRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class DeptServiceImpl implements DeptService {

    @Autowired
    private DepartmentRepo departmentRepo;

    @Override
    public List<Department> getAllDepartment() {
        return departmentRepo.findAll();
    }

    @Override
    public Department getDepartmentById(String departmentId) {
        return departmentRepo.getOne(departmentId);
    }

    @Override
    public void saveOrUpdate(Department department) {
        departmentRepo.save(department);
    }

    @Override
    public void removeDepartment(String departmentId) {
        departmentRepo.deleteById(departmentId);
    }
}
...................................facultyService..........................

package com.cseju.onetomany.service;

import com.cseju.onetomany.modal.Faculty;

import java.util.List;

public interface FacultyService {
    public List<Faculty> getAllFaculty();
    public Faculty getFacultyById(String facultyId);
    public void saveOrUpdate(Faculty faculty);
    public void removeFaculty(String facultyId);
}
............................facultyServiceImpl.............................
package com.cseju.onetomany.service;

import com.cseju.onetomany.modal.Faculty;
import com.cseju.onetomany.repo.FacultyRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class FacultyServiceImpl implements  FacultyService {

    @Autowired
    private FacultyRepo facultyRepo; @Override
    public List<Faculty> getAllFaculty() {
        return facultyRepo.findAll();
    }

    @Override
    public Faculty getFacultyById(String facultyId) {
        return facultyRepo.getOne(facultyId);
    }

    @Override
    public void saveOrUpdate(Faculty faculty) {
        facultyRepo.save(faculty);
    }

    @Override
    public void removeFaculty(String facultyId) {
        facultyRepo.deleteById(facultyId);
    }
}
.....................department.html................................
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Departments</title>
</head>
<body>



<div th:if="${accessTypeFlag}==1">
    <form th:object="${model}" th:action="@{/department/admin/save}" method="post">
        <table>




            <tbody>


            Add Department</h2> Edit Department</h2>

            Enter Department ID:</td>

            <td><input type="text" th:field="*{deptId}" th:value="${model.deptId}"	placeholder="Enter dept id"></td>
            </tr>

            Enter Department Name:</td>
            <td><input type="text" th:field="*{deptName}" th:value="${model.deptName}" placeholder="Enter Dept Name"></td>
            </tr>

            Enter Department Code: </td>
            <td><input type="text" th:field="*{deptCode}" th:value="${model.deptCode}" placeholder="Enter dept code"></td>
            </tr>

            Enter Faculty: </td>
            <td><select th:field="*{faculty.facultyId}">
                <option th:each="f:${fList}" th:text="${f.facultyName}" th:value="${f.facultyId}"></option>
            </select>

                </tr>

            </tbody>

        </table>

        <input type="submit" value="Save">


    </form>
</div>
<br>


<div th:if="${MODE}==1">
    <h2> List of Department</h2>


    <table th:object="${listOfModel}" border="1">

        <thead>

        <td><strong>Dept Id</strong></td>
        <td><strong>Dept Name</strong></td>
        <td><strong>Code</strong></td>
        <td th:if="${accessTypeFlag}==1"><strong>Action</strong></td>
        </tr>
        </thead>
        <tbody>
        <tr th:each="f: ${listOfModel}">
            <td th:text="${f.deptId}" th:value="${f.deptId}"></td>
            <td th:text="${f.deptName}" th:value="${f.deptName}"></td>
            <td th:text="${f.deptCode}" th:value="${f.deptCode}"></td>
            <td th:if="${accessTypeFlag}==1">
<span><a role="button" th:href="@{'/department/admin/edit/'+${f.deptId}(modelId=${f.deptId})}">Edit</a></span>
                <span><a role="button" th:href="@{'/department/admin/remove/'+${f.deptId}(modelId=${f.deptId})}">Remove</a></span>
            </td>




        </tr>
        </tbody>
    </table>
</div>
</body>
</html>



...................................faculty.html........................................
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Faculties</title>
</head>
<body>
<div th:if="${accessTypeFlag}==1">
    <form th:object="${model}" th:action="@{/faculty/admin/save}" method="post">
        <table>
            <h2 th:if="${MODE}!=2">Add Faculty</h2>
            <h2 th:if="${MODE}==2">Edit Faculty</h2>
            <tbody>

            Enter Faculty ID:</td>
            <td><input type="text" th:field="*{facultyId}" th:value="${model.facultyId}" placeholder="Enter faculty id">
            </td>
            </tr>

            Enter Faculty Name:</td>
            <td><input type="text" th:field="*{facultyName}" th:value="${model.facultyName}"
                       placeholder="Enter faculty Name"></td>
            </tr>

            Enter Faculty Code: </td>
            <td><input type="text" th:field="*{facultyCode}" th:value="${model.facultyCode}"
                       placeholder="Enter faculty code"></td>
            </tr>

            </tbody>

        </table>

        <input type="submit" value="Save">
    </form>
</div>
<br>


<div th:if="${MODE}==1">
    <h2> List of Faculty</h2>


    <table th:object="${listOfModel}" border="1">

        <thead>

        <td><strong>Faculty Id</strong></td>
        <td><strong>Faculty Name</strong></td>
        <td><strong>Code</strong></td>
        <td th:if="${accessTypeFlag}==1"><strong>Action</strong></td>
        </tr>
        </thead>
        <tbody>
        <tr th:each="f: ${listOfModel}">
            <td th:text="${f.facultyId}" th:value="${f.facultyId}"></td>
            <td th:text="${f.facultyName}" th:value="${f.facultyName}"></td>
            <td th:text="${f.facultyCode}" th:value="${f.facultyCode}"></td>
            <td th:if="${accessTypeFlag}==1">
<span><a role="button" th:href="@{'/faculty/admin/edit/'+
${f.facultyId}(modelId=${f.facultyId})}">Edit</a></span>
                <span><a role="button" th:href="@{'/faculty/admin/remove/'+${f.facultyId}(modelId=${f.facultyId})}">Remove</a></span>
            </td>
        </tr>
        </tbody>
    </table>
</div>


</body>
</html>


